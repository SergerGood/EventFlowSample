name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      checks: write
      pull-requests: write

    services:
      rabbitmq:
        image: rabbitmq:latest
        ports:
        - 5672:5672
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_PORT: 5432
          POSTGRES_DB: event_flow_sample
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
        
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.x
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget

    - name: Install dependencies
      run: dotnet restore /home/runner/work/EventFlowSample/EventFlowSample/EventFlowSample/EventFlowSample.sln
      
    - name: Build
      run: dotnet build -c Release --no-restore /home/runner/work/EventFlowSample/EventFlowSample/EventFlowSample/EventFlowSample.sln
      
    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
          packages: postgresql-client
          version: 1.0
    - name: Setup database
      run: |
        psql -h localhost -U postgres -c 'DROP DATABASE IF EXISTS "event_flow_sample";'
        psql -h localhost -U postgres -c 'CREATE DATABASE "event_flow_sample";'
        psql -h localhost -U postgres -d event_flow_sample -c 'CREATE TABLE "ReadModel-Aggregate" (id varchar NULL, magicnumber int4 NULL);'
      env:
        PGPASSWORD: postgres
    - name: Run tests
      run: dotnet test --logger "trx;LogFileName=test-results.trx" -c Release --no-restore --verbosity normal /home/runner/work/EventFlowSample/EventFlowSample/EventFlowSample/GettingStartedTest/GettingStartedTest.csproj
      env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: localhost
          # The default PostgreSQL port
          POSTGRES_PORT: 5432
          
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure() # run this step even if previous step failed
      with:
        name: Tests
        path: /home/runner/work/EventFlowSample/EventFlowSample/EventFlowSample/GettingStartedTest/TestResults/test-results.trx
        reporter: dotnet-trx

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      id: test-results
      if: always()
      with:
        files: "/home/runner/work/EventFlowSample/EventFlowSample/EventFlowSample/GettingStartedTest/TestResults/test-results.trx"
    - name: Set badge color
      shell: bash
      run: |
        case ${{ fromJSON( steps.test-results.outputs.json ).conclusion }} in
          success)
            echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
            ;;
          failure)
            echo "BADGE_COLOR=800000" >> $GITHUB_ENV
            ;;
          neutral)
            echo "BADGE_COLOR=696969" >> $GITHUB_ENV
            ;;
        esac
    
    - name: Create badge
      uses: emibcn/badge-action@d6f51ff11b5c3382b3b88689ae2d6db22d9737d1
      with:
        label: Tests
        status: '${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.tests }} tests, ${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.runs }} runs: ${{ fromJSON( steps.test-results.outputs.json ).conclusion }}'
        color: ${{ env.BADGE_COLOR }}
        path: badge.svg
    
    - name: Upload badge to Gist
      # Upload only for master branch
      if: >
        github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'master' ||
        github.event_name != 'workflow_run' && github.ref == 'refs/heads/master'
      uses: andymckay/append-gist-action@1fbfbbce708a39bd45846f0955ed5521f2099c6d
      with:
        token: ${{ secrets.GIST_TOKEN }}
        gistURL: https://gist.githubusercontent.com/{user}/{id}
        file: badge.svg
